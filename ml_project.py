# -*- coding: utf-8 -*-
"""ML_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q9tcoDtPETd6eob3sIW8J_7zEao3i8uL
"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
from datetime import datetime

from google.colab import drive
drive.mount('/content/drive')

# The stocks we'll use for this analysis (top 4 market capital banks)
stock_names = ['HDFC', 'ICICI', 'SBI', 'KOTAK']

# HDFC data

df1 = pd.read_csv("/content/drive/MyDrive/NIFTY_50/HDFCBANK.csv")
df1.columns

df1.head()

# HDFC data

df1.set_index("Date", drop=False, inplace=True)
HDFC = df1[['Open', 'High', 'Low', 'Close', 'VWAP', 'Volume', 'Turnover', 'Trades']].copy()
HDFC.head()

# VWAP variation over time of HDFC

HDFC.VWAP.plot(figsize=(14, 7))

# ICICI data

df2 = pd.read_csv("/content/drive/MyDrive/NIFTY_50/ICICIBANK.csv")
df2.set_index("Date", drop=False, inplace=True)
ICICI = df2[['Open', 'High', 'Low', 'Close', 'VWAP', 'Volume', 'Turnover', 'Trades']].copy()
ICICI.head()

# VWAP variation over time of ICICI

ICICI.VWAP.plot(figsize=(14, 7))

# SBI data

df3 = pd.read_csv("/content/drive/MyDrive/NIFTY_50/SBIN.csv")
df3.set_index("Date", drop=False, inplace=True)
SBI = df3[['Open', 'High', 'Low', 'Close', 'VWAP', 'Volume', 'Turnover', 'Trades']].copy()
SBI.head()

# VWAP variation over time of SBI

SBI.VWAP.plot(figsize=(14, 7))

# KOTAK data

df4 = pd.read_csv("/content/drive/MyDrive/NIFTY_50/KOTAKBANK.csv")
df4.set_index("Date", drop=False, inplace=True)
KOTAK = df4[['Open', 'High', 'Low', 'Close', 'VWAP', 'Volume', 'Turnover', 'Trades']].copy()
KOTAK.head()

# VWAP variation over time of KOTAK

KOTAK.VWAP.plot(figsize=(14, 7))

# Summary Stats of HDFC

HDFC.describe()

# General info of HDFC

HDFC.info()

# VWAP variations of all stocks over time

stock_list = [HDFC, ICICI, SBI, KOTAK]

plt.figure(figsize=(15, 10))
plt.subplots_adjust(top=1.25, bottom=1.2)

for i, stock in enumerate(stock_list, 1):
    plt.subplot(2, 2, i)
    stock['VWAP'].plot()
    plt.ylabel('VWAP')
    plt.xlabel(None)
    plt.title(f"VWAP of {stock_names[i - 1]}")

plt.tight_layout()

# total volume of all stock being traded each day

plt.figure(figsize=(15, 10))
plt.subplots_adjust(top=1.25, bottom=1.2)

for i, stock in enumerate(stock_list, 1):
    plt.subplot(2, 2, i)
    stock['Volume'].plot()
    plt.ylabel('Volume')
    plt.xlabel(None)
    plt.title(f"Sales Volume for {stock_names[i - 1]}")

plt.tight_layout()

# moving average of the various stocks
# average is taken over a specific period of time, like 90 days, 180 days, 365 days

ma_day = [90, 180, 365]

for ma in ma_day:
    for stock in stock_list:
        column_name = f"MA for {ma} days"
        stock[column_name] = stock['VWAP'].rolling(ma).mean()


fig, axes = plt.subplots(nrows=2, ncols=2)
fig.set_figheight(10)
fig.set_figwidth(15)

HDFC[['VWAP', 'MA for 90 days', 'MA for 180 days', 'MA for 365 days']].plot(ax=axes[0,0])
axes[0,0].set_title('HDFC')

ICICI[['VWAP', 'MA for 90 days', 'MA for 180 days', 'MA for 365 days']].plot(ax=axes[0,1])
axes[0,1].set_title('ICICI')

SBI[['VWAP', 'MA for 90 days', 'MA for 180 days', 'MA for 365 days']].plot(ax=axes[1,0])
axes[1,0].set_title('SBI')

KOTAK[['VWAP', 'MA for 90 days', 'MA for 180 days', 'MA for 365 days']].plot(ax=axes[1,1])
axes[1,1].set_title('KOTAK')

fig.tight_layout()

# daily return of the stock on average
# using pct_change to find the percent change for each day

for stock in stock_list:
    stock['Daily Return'] = stock['Close'].pct_change()

# Then we'll plot the daily return percentage
fig, axes = plt.subplots(nrows=2, ncols=2)
fig.set_figheight(10)
fig.set_figwidth(15)

HDFC['Daily Return'].plot(ax=axes[0,0], legend=True, linestyle='--', marker='o')
axes[0,0].set_title('HDFC')

ICICI['Daily Return'].plot(ax=axes[0,1], legend=True, linestyle='--', marker='o')
axes[0,1].set_title('ICICI')

SBI['Daily Return'].plot(ax=axes[1,0], legend=True, linestyle='--', marker='o')
axes[1,0].set_title('SBI')

KOTAK['Daily Return'].plot(ax=axes[1,1], legend=True, linestyle='--', marker='o')
axes[1,1].set_title('KOTAK')

fig.tight_layout()

# average daily return using a histogram

plt.figure(figsize=(12, 9))

for i, stock in enumerate(stock_list, 1):
    plt.subplot(2, 2, i)
    stock['Daily Return'].hist(bins=100)
    plt.xlabel('Daily Return')
    plt.ylabel('Counts')
    plt.title(f'{stock_names[i - 1]}')
    plt.xlim(-0.2, 0.2)

plt.tight_layout()

# correlation between different stocks closing prices

VWAP_df = pd.DataFrame()

for i, stock in enumerate(stock_list, 1):
    VWAP_df[stock_names[i-1]] = stock['VWAP']

VWAP_df.head()

stock_returns = VWAP_df.pct_change()
stock_returns.head()

# using jointplot to compare the daily returns of HDFC and ICICI

plot1 = sns.jointplot(x='HDFC', y='ICICI', data=stock_returns, kind='scatter')
plt.xlim(-0.3, 0.3)
plt.ylim(-0.3, 0.3)
plt.show()

# correlation pairplots for daily returns

sns.pairplot(stock_returns, kind='reg')

# correlation pairplots for VWAP

sns.pairplot(VWAP_df, kind='reg')

plt.figure(figsize=(12, 10))

plt.subplot(2, 2, 1)
sns.heatmap(stock_returns.corr(), annot=True, cmap='summer')
plt.title('Correlation of stock return')

plt.subplot(2, 2, 2)
sns.heatmap(VWAP_df.corr(), annot=True, cmap='summer')
plt.title('Correlation of stock closing price')

# value we put at risk by investing in a particular stock

# by comparing the expected return with the standard deviation of the daily returns.

plt.figure(figsize=(10, 8))
plt.scatter(stock_returns.mean(), stock_returns.std(), s=60)
plt.xlabel('Expected return')
plt.ylabel('Risk')

for label, x, y in zip(stock_returns.columns, stock_returns.mean(), stock_returns.std()):
    plt.annotate(label, xy=(x, y))

# feature engineering

lag_features = ["High", "Low", "Volume", "Turnover", "Trades"]
window1 = 3
window2 = 7
window3 = 30

for stock in stock_list:
    df_rolled_3d = stock[lag_features].rolling(window=window1, min_periods=0)
    df_rolled_7d = stock[lag_features].rolling(window=window2, min_periods=0)
    df_rolled_30d = stock[lag_features].rolling(window=window3, min_periods=0)

    display(df_rolled_3d)

    df_mean_3d = df_rolled_3d.mean().shift(1).reset_index().astype(np.float32)
    df_mean_7d = df_rolled_7d.mean().shift(1).reset_index().astype(np.float32)
    df_mean_30d = df_rolled_30d.mean().shift(1).reset_index().astype(np.float32)

    df_std_3d = df_rolled_3d.std().shift(1).reset_index().astype(np.float32)
    df_std_7d = df_rolled_7d.std().shift(1).reset_index().astype(np.float32)
    df_std_30d = df_rolled_30d.std().shift(1).reset_index().astype(np.float32)

    for feature in lag_features:
        stock[f"{feature}_mean_lag{window1}"] = df_mean_3d[feature]
        stock[f"{feature}_mean_lag{window2}"] = df_mean_7d[feature]
        stock[f"{feature}_mean_lag{window3}"] = df_mean_30d[feature]

        stock[f"{feature}_std_lag{window1}"] = df_std_3d[feature]
        stock[f"{feature}_std_lag{window2}"] = df_std_7d[feature]
        stock[f"{feature}_std_lag{window3}"] = df_std_30d[feature]

    stock.fillna(df.mean(), inplace=True)

    display(stock.head())